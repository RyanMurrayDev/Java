
package tictactoe;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

public class GamePanel extends javax.swing.JPanel
{
    private ArrayList<ImageSprite> sprites;
    TicTacToeGame game;
    private BufferedImage xImage;
    private BufferedImage oImage;

    public GamePanel()
    {
        try
        {
            initComponents();
            xImage = ImageIO.read(getClass().getResource("/tictactoe/x.png"));
            oImage = ImageIO.read(getClass().getResource("/tictactoe/o.png"));
            sprites = new ArrayList<>();
            game =  new TicTacToeGame();
        }
        catch (IOException ex)
        {
            System.out.println(ex.getMessage());
        }
        
    }
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        Dimension d = this.getSize();
        g.drawLine(20, d.height/3, d.width - 20, d.height/3);
        g.drawLine(20, 2 * d.height/3, d.width -20, 2 * d.height/3);
        g.drawLine(d.width/3, 20, d.width/3, d.height - 20);
        g.drawLine(2 * d.width/3, 20, 2 *d.width/3, d.height - 20);
        for(int i = 0; i < sprites.size(); i++)
        {
            sprites.get(i).draw(g);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setPreferredSize(new java.awt.Dimension(600, 600));
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
    {//GEN-HEADEREND:event_formMouseClicked
        int row;
        int col;
        Dimension d = this.getSize();
        if(evt.getY() < d.height/3)
        {
            row = 0;
        }
        else if(evt.getY() > 2*d.height/3)
        {
            row = 2;
        }
        else 
        {
            row = 1;
        }
        if(evt.getX() < d.width/3)
        {
            col = 0;
        }
        else if(evt.getX() > 2*d.width/3)
        {
            col = 2;
        }
        else 
        {
            col = 1;
        }
        if( game.isCellFree(row, col))
        {
            BufferedImage img;
            if(game.getTurn() == Turn.X)
            {
                img = xImage;
            }
            else
            {
                img = oImage;
            }
            if(game.checkForWinner() == GameState.ONGOING)
            {
            GameState gs = game.placeMarker(row, col);
            ImageSprite is = new ImageSprite(col*d.width/3 + 50, row*d.height/3 + 50, img);
            sprites.add(is);
            }
            repaint();
             if(game.checkForWinner() == GameState.TIE)
            {
                JOptionPane.showMessageDialog(this, "Both lose");
            }
            if(game.checkForWinner() == GameState.WINNER_O)
            {
                JOptionPane.showMessageDialog(this, "O WINS!");
            }
            if (game.checkForWinner() == GameState.WINNER_X)
            {
                JOptionPane.showMessageDialog(this, "X WINS!");
            }
            repaint();
        }
        
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
